{"ast":null,"code":"var _jsxFileName = \"/Users/labeshgarg/Downloads/rag/frontend/src/components/RAGQuery.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Button, Alert, Spinner, Card, ListGroup } from 'react-bootstrap';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction RAGQuery() {\n  _s();\n  const [query, setQuery] = useState('');\n  const [response, setResponse] = useState(null);\n  const [sources, setSources] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleRAGSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setResponse(null);\n    setSources([]);\n    try {\n      const res = await axios.post('http://localhost:8080/ask_pdf', {\n        query\n      });\n      setResponse(res.data.answer);\n      setSources(res.data.sources);\n    } catch (err) {\n      setError('Error fetching response from server. Ensure a PDF is uploaded before performing RAG.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"RAG Query on Uploaded PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleRAGSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"ragQuery\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Enter your query:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Type your question here...\",\n            value: query,\n            onChange: e => setQuery(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          className: \"mt-3\",\n          disabled: loading,\n          children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\",\n            size: \"sm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 24\n          }, this) : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        className: \"mt-3\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }, this), response && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          className: \"mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: \"Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: response\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: \"mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: \"Sources:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\",\n              children: sources.map((source, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Source:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 23\n                }, this), \" \", source.source, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 64\n                }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Content:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 23\n                }, this), \" \", source.page_content]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(RAGQuery, \"3zhQSMJH/xRCKodNGuI5RUGPJKI=\");\n_c = RAGQuery;\nexport default RAGQuery;\nvar _c;\n$RefreshReg$(_c, \"RAGQuery\");","map":{"version":3,"names":["React","useState","Form","Button","Alert","Spinner","Card","ListGroup","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","RAGQuery","_s","query","setQuery","response","setResponse","sources","setSources","loading","setLoading","error","setError","handleRAGSubmit","e","preventDefault","res","post","data","answer","err","children","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Group","controlId","Label","Control","type","placeholder","value","onChange","target","required","variant","className","disabled","animation","size","Text","map","source","index","Item","page_content","_c","$RefreshReg$"],"sources":["/Users/labeshgarg/Downloads/rag/frontend/src/components/RAGQuery.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Button, Alert, Spinner, Card, ListGroup } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nfunction RAGQuery() {\r\n  const [query, setQuery] = useState('');\r\n  const [response, setResponse] = useState(null);\r\n  const [sources, setSources] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleRAGSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(null);\r\n    setResponse(null);\r\n    setSources([]);\r\n\r\n    try {\r\n      const res = await axios.post('http://localhost:8080/ask_pdf', { query });\r\n      setResponse(res.data.answer);\r\n      setSources(res.data.sources);\r\n    } catch (err) {\r\n      setError('Error fetching response from server. Ensure a PDF is uploaded before performing RAG.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Title>RAG Query on Uploaded PDF</Card.Title>\r\n        <Form onSubmit={handleRAGSubmit}>\r\n          <Form.Group controlId=\"ragQuery\">\r\n            <Form.Label>Enter your query:</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Type your question here...\"\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\" className=\"mt-3\" disabled={loading}>\r\n            {loading ? <Spinner animation=\"border\" size=\"sm\" /> : 'Submit'}\r\n          </Button>\r\n        </Form>\r\n\r\n        {error && <Alert variant=\"danger\" className=\"mt-3\">{error}</Alert>}\r\n\r\n        {response && (\r\n          <>\r\n            <Card className=\"mt-3\">\r\n              <Card.Body>\r\n                <Card.Title>Answer:</Card.Title>\r\n                <Card.Text>{response}</Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n\r\n            <Card className=\"mt-3\">\r\n              <Card.Body>\r\n                <Card.Title>Sources:</Card.Title>\r\n                <ListGroup variant=\"flush\">\r\n                  {sources.map((source, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <strong>Source:</strong> {source.source} <br />\r\n                      <strong>Content:</strong> {source.page_content}\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              </Card.Body>\r\n            </Card>\r\n          </>\r\n        )}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RAGQuery;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}